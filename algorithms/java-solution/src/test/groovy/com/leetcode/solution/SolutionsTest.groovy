package com.leetcode.solution

import spock.lang.Specification

/**
 * Test algorithms with incomplete cases by Spock.
 */
class SolutionsTest extends Specification {

    void setup() {}

    void cleanup() {}

    def "two sum"(int[] nums, int target, int[] result) {
        given:
        def solution = new TwoSum()

        expect:
        solution.twoSum1(nums, target) == result
        solution.twoSum2(nums, target) == result

        where:
        nums                           | target | result
        [1, 5, 8, 10, 23, 99] as int[] | 31     | [2, 4] as int[]
        [1, 5, 8, 10, 23, 99] as int[] | 100    | [0, 5] as int[]
        [-1, 0, 5, 10, 15, 8] as int[] | 9      | [0, 3] as int[]
        [-1, -3, -5, 10, 100] as int[] | 110    | [3, 4] as int[]
    }

    def "add two numbers"() {
        given:
        def solution = new AddTwoNumbers()
        def arr1 = [2, 4, 3] as int[]
        def arr2 = [5, 6, 4] as int[]
        def l1 = Converter.convertListNode(arr1)
        def l2 = Converter.convertListNode(arr2)

        when:
        def res1 = solution.addTwoNumbers1(l1, l2)
        def res2 = solution.addTwoNumbers2(l1, l2)
        def expected = Converter.convertListNode([7, 0, 8] as int[])

        then:
        Converter.convertArray(expected) == Converter.convertArray(res1)
        Converter.convertArray(expected) == Converter.convertArray(res2)
    }

    def "longest substring without repeating characters"() {
        given:
        def solution = new LongestSubstringWithoutRepeatingCharacters()

        when:
        def res = solution.lengthOfLongestSubstring("pwwkew")

        then:
        res == 3
    }

    def "merge k sorted lists"() {
        given:
        def solution = new MergeKSortedLists()
        def i1 = [1, 4, 5] as int[]
        def i2 = [1, 3, 4] as int[]
        int[] i3 = [2, 6]
        def l1 = Converter.convertListNode(i1)
        def l2 = Converter.convertListNode(i2)
        def l3 = Converter.convertListNode(i3)

        when:
        def res = solution.mergeKLists([l1, l2, l3] as ListNode[])

        then:
        Converter.convertArray(res) == [1, 1, 2, 3, 4, 4, 5, 6] as int[]
    }

    def "reverse nodes in k-group"(int[] nums, int k, int[] res) {
        given:
        def solution = new ReverseNodesInKGroup()
        def node = Converter.convertListNode(nums)

        expect:
        Converter.convertArray(solution.reverseKGroup(node, k)) == res

        where:
        nums                     | k | res
        [1] as int[]             | 3 | [1] as int[]
        [1, 2, 3, 4, 5] as int[] | 1 | [1, 2, 3, 4, 5] as int[]
        [1, 2, 3, 4, 5] as int[] | 2 | [2, 1, 4, 3, 5] as int[]
        [1, 2, 3, 4, 5] as int[] | 3 | [3, 2, 1, 4, 5] as int[]
    }

    def " longest valid parentheses"(String s, int len) {
        given:
        def solution = new LongestValidParentheses()

        expect:
        solution.longestValidParentheses(s) == len

        where:
        s           | len
        ""          | 0
        "()"        | 2
        "((()"      | 2
        "(()()"     | 4
        "(()()(()"  | 4
        ")()())"    | 4
        "()(()))))" | 6
    }

    def "search in rotated sorted array"(int[] nums, int target, int res) {
        given:
        def solution = new SearchInRotatedSortedArray()

        expect:
        solution.search1(nums, target) == res
        solution.search2(nums, target) == res

        where:
        nums                  | target | res
        []                    | 1      | -1
        [1]                   | 1      | 0
        [1, 3]                | 3      | 1
        [4, 5, 6, 7, 0, 1, 2] | 0      | 4
        [4, 5, 6, 7, 0, 1, 2] | 3      | -1
    }

    def "find first and last position of element in sorted array"(int[] nums, int target, int[] res) {
        given:
        def solution = new FindFirstAndLastPositionOfElementInSortedArray()

        expect:
        solution.searchRange(nums, target) == res

        where:
        nums                         | target | res
        [5, 7, 7, 8, 8, 10] as int[] | 8      | [3, 4] as int[]
        [5, 7, 7, 8, 8, 10] as int[] | 6      | [-1, -1] as int[]
    }

    def "search insert position"(int[] nums, int target, int res) {
        given:
        def solution = new SearchInsertPosition()

        expect:
        solution.searchInsert(nums, target) == res

        where:
        nums         | target | res
        []           | 9      | 0
        [1]          | 2      | 1
        [1, 3, 5, 6] | 5      | 2
        [1, 3, 5, 6] | 2      | 1
        [1, 3, 5, 6] | 7      | 4
        [1, 3, 5, 6] | 0      | 0
    }

    def "valid sudoku"(char[][] board, boolean res) {
        given:
        def solution = new ValidSudoku()

        expect:
        res == solution.isValidSudoku(board)

        where:
        board                                           | res
        [["8", "3", ".", ".", "7", ".", ".", ".", "."],
         ["6", ".", ".", "1", "9", "5", ".", ".", "."],
         [".", "9", "8", ".", ".", ".", ".", "6", "."],
         ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
         ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
         ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
         [".", "6", ".", ".", ".", ".", "2", "8", "."],
         [".", ".", ".", "4", "1", "9", ".", ".", "5"],
         [".", ".", ".", ".", "8", ".", ".", "7", "9"]] | false
        [["5", "3", ".", ".", "7", ".", ".", ".", "."],
         ["6", ".", ".", "1", "9", "5", ".", ".", "."],
         [".", "9", "8", ".", ".", ".", ".", "6", "."],
         ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
         ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
         ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
         [".", "6", ".", ".", ".", ".", "2", "8", "."],
         [".", ".", ".", "4", "1", "9", ".", ".", "5"],
         [".", ".", ".", ".", "8", ".", ".", "7", "9"]] | true
    }

    def "distribute-coins-in-binary-tree"(TreeNode root, int res) {
        given:
        def solution = new DistributeCoinsInBinaryTree()

        expect:
        solution.distributeCoins(root) == res

        where:
        root | res
        null | 0
    }

//    def "unique-paths-iii"(int[][] grid, int res) {
//        given:
//        def solution = new UniquePaths3()
//
//        expect:
//        solution.uniquePathsIII(grid) == res
//
//        where:
//        grid                                        | res
//        [[1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 2, -1]] | 2
//        [[1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 2]]  | 4
//        [[0, 1], [2, 0]]                            | 0
//    }

    def "triples-with-bitwise-and-equal-to-zero"(int[] nums, int res) {
        given:
        def solution = new TriplesWithBitwiseAndEqualToZero()

        expect:
        solution.countTriplets(nums) == res

        where:
        nums                        | res
        [2, 1, 3]                   | 12
        [41816, 11362, 40028, 40141, 46197, 33562, 18640, 57505, 23138, 30034,
         41410, 33824, 62683, 62568, 60932, 61215, 38073, 32125, 46144, 14117,
         17424, 2870, 10673, 253, 42901, 9201, 51555, 44597, 63614, 25985, 60384,
         29733, 22249, 6706, 57857, 52087, 21163, 29867, 21308, 1889, 2906, 24163,
         13735, 34374, 12306, 13213, 44083, 48208, 20462, 56360, 16688, 22540,
         46693, 2916, 61222, 4740, 30207, 47487, 3110, 53018, 64152, 30180, 7741,
         5339, 6470, 50163, 27132, 60242, 28877, 5055, 27979, 49468, 54351, 2578,
         11821, 32113, 8394, 57087, 61240, 20945, 28497, 36507, 18710, 35459,
         13184, 19440, 28952, 39627, 35138, 17104, 15190, 7781, 51347, 6481, 48030,
         16303, 18648, 48239, 43228, 48622, 33769, 56301, 7981, 42283, 7749, 48318,
         23521, 44229, 46103, 43293, 14520, 54512, 15737, 33957, 44213, 15309,
         41190, 18797, 11231, 53067, 36249, 21488, 38366, 1657, 8508, 25924, 63947,
         33454, 5010, 50137, 51212, 50777, 37322, 45593, 13989, 48009, 53488,
         49805, 23164, 38733, 41221, 59035, 7078, 54652, 34500, 23502, 29858, 828,
         14422, 42779, 43309, 32420, 62477, 31517, 20574, 55560, 16984, 39603,
         46099, 53850, 51469, 25171, 3878, 2509, 47609, 63025, 22489, 28914, 47565,
         43111, 17046, 44012, 19982, 23354, 35357, 47992, 9910, 1440, 41145, 1609,
         2946, 14796, 42852, 4361, 4089, 63707, 27698, 58486, 14190, 28522, 23464,
         11595, 21549, 64670, 48975, 25078, 26822, 17284, 34821, 48210, 45000,
         30320, 2748, 60391, 26799, 25578, 203, 9058, 56941, 33681, 48000, 9710,
         21630, 55059, 53782, 16173, 1440, 52852, 11065, 51621, 44804, 11030, 5143,
         60794, 39182, 40665, 29983, 9835, 39450, 16546, 52815, 48019, 1786, 61107,
         2380, 5873, 19184, 9883, 15476, 23318, 48201, 26523, 17684, 32264, 25728,
         20366, 59017, 36074, 64050, 50653, 37388, 17199, 45012, 29879, 47276,
         26462, 32506, 1355, 48493, 2246, 44612, 38142, 50850, 18990, 44964, 13572,
         34686, 22300, 64123, 63692, 13695, 37095, 21590, 63474, 60589, 38413,
         47191, 44651, 23157, 60054, 58946, 21670, 48981, 595, 53500, 37019, 62410,
         23802, 41006, 21168, 51300, 39367, 64714, 66, 9224, 2857, 8247, 60908,
         62167, 31484, 62042, 53633, 51027, 48973, 12298, 35971, 27779, 62245,
         11392, 11131, 43179, 10315, 7212, 33025, 52209, 39652, 49463, 17416,
         18675, 28095, 64936, 47049, 62013, 35249, 36343, 64886, 12451, 51287,
         51872, 55360, 49155, 10179, 43327, 60535, 36915, 23654, 62227, 36804,
         26977, 40247, 52699, 14962, 1028, 34674, 61692, 44581, 41347, 41144,
         32570, 47901, 16331, 58442, 17987, 61927, 60718, 5106, 29371, 48761,
         29468, 33351, 52876, 46202, 62783, 10779, 60526, 60816, 41598, 61629,
         16560, 57788, 50690, 39956, 5939, 1974, 718, 16420, 49961, 25337, 50819,
         41002, 25510, 57681, 2517, 30494, 54385, 8310, 46562, 21503, 1592, 31046,
         34189, 2725, 37088, 22769, 294, 12502, 7262, 35430, 2825, 60826, 55381,
         61951, 20630, 59327, 64507, 50117, 18027, 43967, 39037, 26489, 20060,
         3922, 8217, 8778, 31515, 42067, 50073, 3061, 53985, 2848, 36368, 48768,
         41367, 62238, 22590, 38396, 5426, 36686, 53300, 13212, 17102, 45901,
         16638, 16989, 61309, 65440, 10171, 58993, 36223, 2529, 38371, 42044, 2214,
         49656, 53595, 4695, 42493, 29920, 15644, 30059, 10445, 21867, 42939,
         31226, 36432, 35615, 53778, 22503, 53278, 5242, 28031, 23089, 29594,
         54624, 33580, 64700, 56456, 7788, 20767, 1489, 48087, 1258, 58060, 12670,
         27121, 4065, 20398, 25527, 3423, 50302, 46619, 23454, 54735, 5073, 3539,
         23263, 59103, 49575, 44061, 36879, 52675, 27015, 2011, 52586, 12484,
         25405, 23436, 8084, 22989, 11605, 40371, 42823, 894, 29915, 36310, 57125,
         32507, 5272, 3389, 56499, 51821, 56259, 17186, 42467, 6272, 54170, 21863,
         62596, 30892, 2167, 59575, 40994, 18814, 2411, 24686, 10280, 35932, 9626,
         11443, 60350, 41950, 15897, 57599, 40941, 61970, 31648, 58189, 44462,
         2894, 15747, 18453, 11142, 15609, 14813, 57563, 30336, 57443, 9043, 37022,
         882, 60968, 369, 25552, 52532, 65528, 1278, 54007, 33429, 2502, 50929,
         7333, 40073, 51008, 44144, 24895, 1732, 28590, 59879, 21818, 16250, 9032,
         33439, 34953, 4787, 26722, 43167, 63311, 28281, 28576, 30876, 14747,
         25876, 42288, 26021, 38101, 54760, 65402, 58001, 24366, 1423, 40082,
         31100, 15533, 2641, 21074, 52302, 63184, 6990, 57516, 3192, 46758, 1756,
         27593, 57031, 25762, 60592, 46739, 39595, 10576, 22314, 26941, 38679,
         65276, 18593, 33001, 61174, 22637, 41196, 50209, 41305, 49376, 12824,
         62740, 11593, 38252, 19401, 41577, 19078, 28259, 44710, 17633, 47702,
         22732, 8660, 40182, 10863, 28218, 26109, 4991, 46581, 44618, 50973, 35711,
         36301, 11090, 13596, 14958, 34426, 53672, 23394, 57794, 48226, 46953,
         21965, 7764, 63097, 56007, 26795, 56571, 58931, 22444, 32870, 21744,
         45557, 59779, 64523, 48744, 20004, 57704, 65052, 22709, 62174, 33524,
         63218, 65264, 53276, 44789, 10093, 322, 39024, 46167, 61311, 33889, 45668,
         42425, 13429, 42224, 64338, 7286, 45124, 40259, 24632, 51992, 687, 58485,
         53566, 31503, 7087, 29663, 38289, 16638, 31885, 50838, 60472, 36807,
         54214, 5107, 56122, 60346, 11010, 54230, 55677, 57583, 33891, 39862,
         13636, 46408, 26543, 1387, 8799, 25442, 58011, 37024, 60047, 60914, 5688,
         38549, 21923, 33213, 29853, 31453, 6671, 54601, 32130, 42269, 30977,
         11863, 35455, 10455, 55848, 54500, 9413, 4511, 4488, 25771, 62458, 36447,
         17401, 15050, 7266, 9245, 53206, 9085, 56627, 53936, 8965, 36616, 462,
         56494, 36587, 49501, 32135, 45247, 61029, 36670, 57324, 22481, 6391, 337,
         14853, 54957, 20414, 14720, 32481, 62056, 33356, 22339, 5079, 37595,
         14827, 24084, 24979, 49688, 15180, 61334, 48653, 31530, 57702, 23538,
         25188, 8478, 51023, 26292, 32784, 30865, 43003, 24506, 60021, 28306,
         23541, 26271, 50219, 65080, 56787, 31439, 19094, 29228, 22545, 15960,
         12251, 62644, 32722, 7207, 25159, 25474, 33654, 64227, 64004, 37086,
         40507, 44278, 32913, 31894, 20612, 44821, 6022, 20784, 58391, 14901,
         63411, 64498, 37708, 2650, 6126, 13126, 21417, 7412, 52246, 23865, 15317,
         2863, 25078, 295, 7634, 39626, 61272, 13065, 48566, 12956, 97, 58755,
         55450, 4376, 11608, 15355, 60838, 25030, 52912, 28561, 24985, 50157,
         40354, 17650, 38195, 46127, 54203, 44379, 41992, 39053, 6032, 61943,
         46847, 17882, 45373, 40685, 43178, 24832, 37563, 43255, 13215, 33293,
         7886, 6916, 59707, 8162, 58541, 30788, 29812, 22270, 27277, 24722, 37026,
         21993, 53869, 15306, 16283, 31493, 61281, 1567, 47409, 393, 26532, 50083,
         29234, 28146, 16594, 31135, 14959, 18580, 42814, 39285, 60918, 63495,
         34234, 5738, 19654, 33934, 44116, 62009, 10165, 2404, 57018, 52767, 50184,
         30710, 44419, 26966, 12586, 25617, 51579, 52550, 62988, 58174, 44701,
         34138, 47443, 12006, 60495, 46699, 38960, 28445, 41519, 40480, 58907,
         37403, 13983, 28926, 15923, 59306, 55281, 36426, 12870, 2853, 8792, 29046,
         44184, 14679, 44860, 56488, 49626, 27887, 42318, 64773, 58026, 22160,
         44921, 10696, 36527, 23365, 28714, 28763, 43465, 55443, 30708, 9606,
         49424, 49259, 62511, 25824, 30400, 35428, 58466, 46151, 1394, 13587,
         55960, 38369, 57272, 26961, 13793, 271, 65277, 8937, 42137, 32093, 24913,
         35206, 5130, 63572, 32292] | 113138322
    }

    def "min-cost-tickets"(int[] days, int[] costs, int res) {
        given:
        def solution = new MinimumCostForTickets()

        expect:
        solution.mincostTickets(days, costs) == res

        where:
        days                                    | costs      | res
        [1, 4, 6, 7, 8, 20]                     | [2, 7, 15] | 11
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 31] | [2, 7, 15] | 17
    }

    def "string-without-3a3b"(int A, int B, String res) {
        given:
        def solution = new StringWithout3aOr3b()

        expect:
        solution.strWithout3a3b(A, B) == res

        where:
        A | B || res
        1 | 1 || "ab"
        1 | 2 || "bba"
        4 | 1 || "aabaa"
    }

    def "unique-paths-iii"(int[][] grid, int res) {
        given:
        def solution = new UniquePaths3()

        expect:
        solution.uniquePathsIII(grid) == res

        where:
        grid                                        | res
        [[1, 2], [0, 0]]                            | 1
        [[1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 2, -1]] | 2
        [[1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 2]]  | 4
    }

    def "squares-of-a-sorted-array"(int[] A, int[] res) {
        given:
        def solution = new SquaresOfSortedArray()

        expect:
        solution.sortedSquares2(A) == res

        where:
        A                  | res
        [-4, -1, 0, 3, 10] | [0, 1, 9, 16, 100]
        [-7, -3, 2, 3, 11] | [4, 9, 9, 49, 121]
    }

    def "largest-perimeter-triangle"(int[] A, int res) {
        given:
        def solution = new LargestPerimeterTriangle()

        expect:
        solution.largestPerimeter(A) == res

        where:
        A | res
        [2, 1, 2] | 5
        [1, 2, 1] | 0
        [3, 2, 3, 4] | 10
        [3, 6, 2, 3] | 8
        [22, 96, 50, 31, 27, 67, 24, 99, 90, 59, 49, 66, 82, 12, 88, 41, 53, 43, 21, 58, 95, 89, 8, 61, 80, 9, 36, 5, 68, 24, 39, 61, 61, 52, 57, 11, 5506, 4, 10, 43, 64, 34, 20, 46, 85, 86, 95, 19, 65, 66, 3, 64, 100, 80, 26, 82, 95, 32, 95, 72, 8, 36, 54, 78, 63, 10, 89, 92, 42, 14, 78, 64, 22, 99, 59, 18, 69, 56, 29, 75, 60, 100, 14, 6, 6, 23, 56, 40, 29, 81, 27, 39, 6, 13, 79, 100, 69, 19, 94, 89, 95, 63, 4, 92, 74, 22, 73, 84, 27, 7, 3, 76, 30, 35, 90, 33, 74, 60, 90, 69, 100, 61, 98, 43, 3, 95, 46, 16, 9, 97, 23, 35, 86, 56, 49, 60, 35, 44, 28, 38, 2093, 26, 6, 77, 78, 8, 54, 87, 81, 49, 12, 98, 79, 13, 61, 57, 73, 59, 46, 82, 83, 14, 81, 43, 51, 88, 21, 50, 30, 87, 97, 35, 78, 14, 38, 47, 11, 1296, 74, 93, 52, 75, 93, 11, 75, 84, 54, 5, 12, 17, 49, 49, 34, 98, 47, 82, 93, 59, 82, 678989, 70, 55, 74, 70, 82, 25, 39, 71, 61, 33, 92, 38, 65, 32, 20, 46, 34, 66, 36, 30, 70, 59, 28, 77, 81, 43, 1, 79, 98, 38, 56, 29, 88, 80, 77, 4, 55, 92, 89, 32, 50, 31, 72, 57, 87, 12, 15, 32, 59, 19, 16, 73, 84, 7, 55, 12, 95, 8, 34, 4, 89, 83, 10, 20, 92, 24, 29, 12, 4, 20, 47, 59, 23, 51, 49, 96, 73, 72, 43, 97, 5, 60, 55, 43, 99053, 7, 94, 23, 40, 88, 31, 10, 41, 41, 61, 52, 23, 59, 96, 99, 9, 82, 20, 15, 72, 11, 26, 3, 56, 62, 4, 54, 2, 5, 85, 80, 43, 74, 1, 75, 30, 48, 17, 36, 70, 67, 1, 62, 92, 85, 73, 39, 25, 42, 1, 74, 69, 93, 29, 12, 20, 8918, 26, 78, 21, 39, 1, 68, 61, 37, 48, 27, 97, 60, 81, 26, 18, 7, 49, 71, 30, 8, 24, 71, 78, 33, 98, 67, 39, 15, 2, 57, 18, 6, 34, 59, 68, 4, 32, 50, 13, 80, 88, 73, 54, 6, 89, 28, 69, 73, 49, 5, 51, 13, 41, 21, 79, 59, 17, 54, 6, 84, 11, 17, 16, 11, 27, 65, 37, 69, 31, 495, 1, 64, 86, 24, 1, 95, 69, 32, 63, 10, 77, 88, 20, 26, 37, 93, 13, 35, 100, 47, 77, 62, 48, 84, 5, 95, 79, 46, 64, 29, 17, 57, 26, 34, 13, 41, 11, 63, 69, 33, 61, 94, 21, 61, 11, 34, 41, 41, 75, 37, 31, 21, 33, 50, 96, 58, 64, 82, 46, 57, 419634, 6, 40, 49, 69, 67, 76, 98, 71, 100, 42, 76, 36, 47, 24, 51, 28, 86, 75, 25, 11, 2, 54, 84, 70, 40, 55, 5, 47, 19, 48, 37, 44, 1, 17, 76, 89, 37, 79, 84, 62, 61, 80, 85, 94, 34, 34, 8, 44, 54, 67, 38, 46, 7, 5, 38, 48, 79, 38, 61, 99, 100, 1, 5, 36, 20, 60, 96, 75, 90, 26, 43, 29, 62, 6, 52, 39, 63, 23, 93, 57, 31, 3, 29, 69, 74, 86, 81, 40, 49, 17, 90, 87, 97, 82, 21, 71, 95, 71, 94, 45, 3, 100, 82, 20, 6, 94, 57, 2, 20, 48, 90, 259339, 66, 56, 39, 87, 60, 16, 45, 9, 97, 97, 32, 99, 35, 83, 1, 15, 25, 18, 96, 50, 58, 11, 83, 8, 1, 53, 46, 18, 29, 35, 42, 22, 95, 9, 60, 84, 14, 37, 82, 14444, 10, 59, 54, 5, 19, 47, 53, 20, 44, 31, 37, 19, 74, 13, 94, 27, 23, 71, 82, 55, 16, 21, 12, 20, 63, 30, 57, 87, 33, 78, 80, 39, 13, 71, 21, 99, 53, 76, 97, 98, 80, 61, 77, 30, 92, 69, 77, 69, 31, 296, 36, 61, 64, 96, 17, 94, 56, 22, 26, 90, 73, 91, 96, 71, 80, 36, 72, 51, 1, 8, 4, 98, 43, 42, 92, 72, 36, 81, 19, 75, 75, 71, 15, 72, 31, 67, 13, 58, 79, 48, 89, 16, 91, 31, 77, 68, 16, 14, 59, 89, 77, 36, 27, 70, 72, 76, 21, 61, 24, 61, 22, 44, 38, 96, 37824, 29, 69, 57, 77, 66, 28, 10, 38, 83, 6, 55, 35, 27, 73, 54, 66, 86, 18, 65, 58, 73, 100, 21, 13, 794, 34, 77, 32, 38, 45, 36, 99, 60, 24, 59, 74, 63, 99, 44, 29, 90, 89, 53, 57, 38, 70, 15, 70, 84, 31, 45, 41, 9, 51, 95, 14, 7, 48, 11, 41, 11, 87, 68, 92, 58, 33, 66, 8, 82, 38, 65, 12, 52, 35, 51, 3400, 92, 42, 75, 82, 37, 41, 66, 98, 10, 56, 58, 80, 53, 30, 26, 43, 19, 55, 83, 49, 16, 39, 48, 74, 27, 10, 16, 5, 85, 43, 70, 71, 67, 1, 23369, 94, 42, 39, 15, 91, 92, 11, 81, 85, 58, 8, 43, 81, 13, 74, 38, 14, 8, 27, 38, 55, 92, 75, 33, 11, 94, 38, 58, 33, 90, 61, 55, 33, 1, 19, 96, 91, 25, 89, 75, 81, 20, 62, 10, 44, 87, 6, 76, 72, 87, 48, 44, 22, 18, 181, 23, 75, 18, 83, 47, 79, 91, 75, 2, 85, 57, 71, 64, 11, 4, 84, 70, 97, 80, 51, 61211, 48, 92, 25, 2, 91, 87, 62, 69, 82, 160275, 67, 31, 97, 26, 50, 65, 87, 97, 35, 83, 56, 44, 58, 42, 17, 41, 77, 83, 34, 88, 26, 73, 22, 65, 83, 91, 14, 3, 55, 100, 84, 23, 46, 39, 78, 39, 68, 35, 100, 91, 40, 56, 13, 97, 94, 94, 46, 3, 7, 13, 18, 86, 47, 39, 18, 67, 94, 40, 6, 70, 32, 37, 21] | 381
        [757, 341, 254, 499, 96, 622, 685, 514, 482, 655, 680, 593, 407, 660, 330, 469, 841, 335, 53, 764, 341, 918, 290, 667, 47, 725, 319, 135, 118, 636, 145, 540, 363, 708, 658, 735, 999, 306, 531, 427, 393, 872, 30, 838, 873, 710, 438, 364, 95, 567, 737, 510, 961, 881, 37, 567, 464, 991, 587, 363, 25, 532, 565, 116, 876, 479, 805, 908, 71, 581, 262, 881, 657, 734, 60, 111, 718, 739, 950, 349, 588, 963, 947, 213, 356, 429, 446, 420, 706, 221, 709, 948, 855, 811, 763, 978, 704, 384, 601, 920, 170, 864, 785, 308, 983, 524, 711, 233, 537, 657, 682, 728, 37, 131, 521, 783, 130, 669, 574, 503, 453, 712, 216, 976, 764, 803, 921, 747, 261, 329, 500, 361, 485, 757, 173, 47, 211, 730, 171, 254, 115, 936, 111, 837, 35, 64, 244, 481, 385, 300, 450, 682, 339, 423, 927, 835, 332, 827, 624, 212, 180, 802, 873, 535, 528, 947, 882, 549, 574, 81, 415, 645, 307, 826, 924, 405, 800, 791, 620, 337, 517, 488, 981, 920, 131, 367, 39, 45, 686, 256, 781, 298, 303, 146, 478, 297, 33, 767, 247, 195, 664, 763, 65, 127, 790, 424, 678, 238, 810, 944, 285, 700, 595, 432, 968, 497, 288, 15, 995, 855, 541, 712, 635, 938, 855, 784, 638, 50, 584, 857, 620, 495, 337, 903, 1000, 407, 687, 520, 406, 447, 586, 209, 53, 869, 383, 80, 311, 928, 545, 916, 16, 219, 517, 226, 31, 201, 830, 753, 324, 989, 701, 976, 713, 228, 227, 391, 268, 301, 674, 690, 994, 224, 851, 638, 117, 341, 146, 235, 676, 172, 429, 744, 806, 899, 549, 633, 148, 181, 948, 381, 861, 93, 143, 974, 366, 901, 517, 161, 166, 492, 355, 441, 388, 407, 17, 34, 472, 592, 32, 184, 388, 156, 400, 764, 435, 968, 798, 130, 277, 687, 955, 476, 135, 644, 313, 303, 28, 635, 667, 817, 651, 341, 98, 637, 870, 141, 695, 425, 997, 467, 961, 622, 624, 987, 913, 256, 781, 338, 304, 144, 253, 137, 860, 377, 162, 476, 632, 181, 616, 671, 486, 900, 447, 697, 389, 787, 858, 495, 574, 329, 583, 423, 784, 382, 715, 939, 515, 476, 710, 558, 872, 52, 133, 524, 240, 792, 506, 958, 738, 138, 378, 836, 469, 238, 659, 54, 346, 458, 971, 536, 44, 34, 494, 224, 573, 443, 90, 804, 415, 90, 48, 690, 713, 302, 243, 276, 636, 611, 226, 933, 788, 147, 94, 691, 453, 414, 518, 322, 939, 961, 551, 338, 79, 1000, 186, 671, 404, 675, 653, 965, 218, 268, 410, 656, 793, 615, 884, 911, 55, 360, 297, 526, 913, 120, 301, 551, 604, 454, 545, 531, 3, 642, 85, 67, 394, 235, 731, 862, 599, 804, 574, 951, 981, 855, 226, 19, 336, 259, 441, 342, 305, 250, 727, 78, 985, 672, 110, 78, 719, 57, 375, 449, 750, 593, 497, 376, 930, 67, 822, 750, 10, 170, 371, 465, 5, 542, 965, 388, 508, 888, 873, 337, 590, 863, 425, 812, 347, 41, 306, 813, 413, 343, 613, 12, 978, 81, 227, 78, 560, 164, 921, 847, 279, 113, 663, 290, 474, 395, 390, 241, 206, 804, 568, 831, 391, 83, 501, 222, 823, 171, 1000, 290, 513, 343, 706, 444, 303, 606, 217, 25, 290, 619, 702, 935, 699, 27, 774, 916, 531, 682, 896, 834, 14, 729, 454, 372, 542, 189, 960, 958, 508, 710, 199, 981, 207, 158, 215, 904, 322, 302, 436, 922, 449, 627, 370, 409, 33, 138, 85, 470, 73, 177, 724, 723, 441, 278, 910, 2164, 14, 217, 310, 65, 606, 488, 477, 120, 894, 495, 149, 891, 481, 716, 297, 912, 89, 981, 414, 715, 398, 844, 890, 746, 970, 767, 821, 760, 291, 876, 423, 869, 845, 580, 959, 265, 882, 217, 966, 537, 526, 557, 911, 662, 991, 579, 358, 636, 405, 537, 913, 441, 267, 892, 376, 657, 627, 99, 664, 359, 549, 941, 520, 65, 759, 550, 198, 207, 284, 887, 853, 581, 23, 364, 394, 754, 936, 532, 480, 16203, 965, 531, 429, 72, 963, 640, 365, 797, 349, 219, 235, 571, 282, 732, 976, 625, 277, 298, 726, 619, 668, 917, 598, 895, 489, 128, 365, 701, 537, 68, 27, 32, 546, 169, 323, 548, 38, 819, 498, 276, 498, 520, 959, 95, 202, 615, 387, 451, 429, 255, 572, 19, 61, 496, 584, 142, 977, 1531, 45, 874, 442, 288, 66, 938, 929, 532, 786, 66, 734, 607, 405, 502, 597, 241, 669, 758, 445, 955, 708, 894, 875, 798, 993, 818, 336, 215, 631, 574, 661, 422, 489, 60, 23, 90, 51, 41, 526, 489, 231, 860, 635, 345, 865, 519, 350, 426, 755, 457, 999, 841, 942, 336, 943, 414, 526, 262, 393, 749, 967, 55, 115, 619, 446, 44, 184, 804, 910, 737, 599, 891, 851, 752, 327, 1000, 977, 543, 942, 985, 757, 106, 411, 343, 370, 623, 34, 625, 60, 754, 601, 434, 94, 187, 716, 451, 310, 379, 700, 362, 543, 528, 389, 454, 950, 83, 508, 729, 503, 688, 1000, 787, 3891, 903, 105, 482, 750, 843, 969, 841, 478, 136, 971, 260, 439, 753, 232, 233, 398, 134, 885, 342, 209, 253, 426, 656, 154, 299, 567, 74, 136, 630, 979, 884, 725, 472, 943, 78, 289, 962, 173, 535, 318, 157, 939, 39, 976, 443, 15, 107, 259, 269, 146, 690, 79, 506, 523, 546, 170, 776, 736, 721, 569, 962, 553, 507, 6, 311, 527, 300, 997, 553, 174, 877, 244, 540, 818, 673, 980, 518, 913, 257, 82, 962, 264, 130, 79, 425, 871, 808, 823, 627, 928, 461, 709, 218, 740, 822, 665, 729, 994, 614, 298, 36, 82, 601, 409, 488, 384, 869, 818, 74, 255, 11, 512, 75, 572, 78, 320, 868, 803, 49, 277, 439, 177, 378, 647, 290, 280, 923, 776, 622, 203, 523, 824, 179, 68, 867, 328, 646, 145, 114, 496, 234, 599, 335, 645, 221, 557, 561, 797, 188, 688, 697, 351, 91, 965, 285, 485, 207, 774, 33, 87, 167, 926, 249, 906, 989, 523, 985, 14, 188, 64, 507, 205, 450, 725, 282, 891, 677, 84, 955, 754, 810, 91, 492, 910, 383, 863, 941, 812, 859, 514, 757, 54, 126, 45, 413, 938, 647, 809, 620, 307, 225, 628, 41, 113, 757, 552, 578, 877, 607, 955, 192, 937, 901, 146, 815, 67, 144, 806, 240, 199, 705, 650, 60, 976, 917, 694, 548, 962, 985, 255, 785, 939, 530, 997, 400, 4, 832, 353, 202, 734, 605, 408, 927, 387, 947, 34, 712, 516, 896, 508, 513, 81, 862, 960, 931, 111667, 838, 569, 866, 270, 290, 396, 24, 496, 426, 826, 358, 859, 475, 88, 510, 902, 748, 648, 58, 351, 710, 885, 173, 247, 937, 874, 597, 487, 53, 365, 498, 352, 869, 659, 458, 50, 774, 251, 672, 930, 864, 367, 675, 548, 922, 860, 769, 472, 73, 933, 29, 259, 412, 161, 380, 82, 153, 832, 948, 257, 521, 671, 883, 173, 388, 639, 313, 485, 54, 951, 818, 994, 81, 51, 905, 959, 231, 543, 730, 954, 672, 73, 562, 157, 263, 10003, 596, 834, 690, 210, 231, 185, 180, 581, 883, 459, 238, 208, 98, 988, 418, 806, 321, 985, 183, 749, 427, 538, 491, 51, 74, 306, 722, 28, 399, 268, 611, 441, 10, 321, 849, 733, 228, 735, 411, 883, 345, 751, 753, 896, 91, 627, 737, 969, 529, 274, 56, 168, 716, 789, 132, 176, 616, 69, 319, 525, 284, 530, 68, 23, 214, 617, 628, 68, 718, 526, 408, 851, 636, 743, 142, 237, 930, 110, 199, 158, 598, 323, 847, 621, 392, 982, 112, 515, 309, 504, 129, 915, 328, 328, 677, 722, 427, 14, 608, 737, 865, 469, 961, 465, 413, 803, 875, 161, 561, 497, 114, 786, 293, 436, 999, 247, 410, 845, 575, 444, 454, 692, 746, 965, 423, 711, 579, 614, 405, 643, 132, 466, 347, 152, 474, 215, 645, 369, 369, 576, 603, 305, 807, 799, 720, 958, 845, 904, 292, 91, 764, 82, 99, 408, 816, 260, 982, 595, 437, 301, 261, 438, 871, 429, 864, 538, 765, 702, 380, 792, 713, 692, 103, 668, 554, 106, 448, 41, 514, 668, 847, 68, 812, 414, 666, 825, 548, 882, 531, 65, 260, 317, 85, 180772, 266, 585, 210, 13, 437, 436, 792, 653, 494, 156, 845, 29, 493, 994, 225, 184, 397, 48, 733, 851, 496, 42571, 34, 103, 686, 638, 666, 604, 99, 615, 481, 752, 508, 129, 445, 486, 528, 412, 803, 128, 63, 317, 796, 750, 394, 654, 739, 528, 869, 831, 341, 713, 638, 229, 329, 548, 641, 907, 288, 326, 202, 875, 867, 506, 494, 637, 840, 486, 150, 996, 991, 293, 170, 842, 790, 471, 707, 298, 269, 768, 961, 219, 679, 968, 955, 908, 458, 59, 640, 704, 785, 524, 427, 679, 857, 836, 917, 154, 24, 485, 565, 30, 776, 688, 54, 161, 158, 433, 211, 220, 947, 414, 819, 611, 873, 315, 334, 690, 888, 63, 487, 135, 608, 589, 121, 761, 394, 369, 177, 197, 101, 192, 363, 62, 330, 198, 485, 930, 693, 161, 214, 91, 395, 313, 1000, 949, 592, 65, 28, 886, 393, 359, 188, 698, 532, 824, 753, 506, 190, 409, 363, 13, 932, 630, 734, 84, 789, 523, 512, 593, 814, 324, 705, 814, 104, 579, 162, 648, 673, 974, 507, 882, 700, 714, 892, 41, 103, 129, 912, 491, 891, 5, 413, 233, 442, 997, 469, 141, 695, 680, 357, 449, 874, 421, 2, 351, 570, 319, 69, 814, 266, 540, 165, 443, 618, 980, 854, 18, 941, 565, 943, 110, 977, 255, 889, 810, 239, 216, 430, 566, 760, 236, 581, 808, 483, 926, 68, 368, 990, 987, 604, 926, 487, 197, 935, 502, 405, 639, 727, 385, 906, 762, 460, 148, 727, 270, 175, 546, 735, 160, 459, 828, 735, 915, 326, 102, 772, 405, 208, 35, 496, 691, 187, 851, 543, 63, 13, 393, 857, 14, 399, 668, 942, 554, 910, 411, 952, 620, 760, 103, 669, 416, 985, 408, 787, 830, 666, 570, 950, 944, 723, 791, 422, 448, 565, 549, 819, 221, 282, 872, 47, 850, 667, 159, 102, 223, 831, 330, 24, 470, 701, 312, 787, 111, 281, 432, 967, 551, 831, 604, 875, 467, 533, 773, 196, 365, 363, 688, 885, 951, 391, 370, 648, 824, 600, 177, 477, 811, 290, 882, 297, 128, 862, 714, 99, 578, 905, 214, 920, 810, 426, 915, 786, 233, 743, 115, 436, 559, 137, 651, 172, 691, 845, 257, 733, 179, 991, 730, 345, 691, 534, 220, 128, 143, 265, 156, 711, 833, 193, 301, 129, 407, 819, 480, 42, 992, 474, 746, 46, 230, 38, 208, 579, 886, 854, 62, 782, 469, 201, 709, 334, 214, 400, 294, 211, 933, 848, 503, 468, 179, 702, 452, 645, 569, 82, 965, 833, 33, 962, 941, 527, 467, 536, 243, 576, 775, 353, 954, 940, 984, 667, 104, 160, 467, 607, 703, 451, 68, 333, 780, 29, 912, 373, 993, 695, 845, 682, 176, 29, 869, 42, 846, 898, 144, 60, 327, 283, 568, 746, 498, 176, 251, 933, 37, 832, 189, 475, 983, 156, 836, 522, 579, 637, 249, 294, 609, 115, 634, 492, 764, 381, 831, 698, 682, 410, 854, 509, 754, 116, 857, 312, 774, 959, 918, 943, 8, 573, 733, 241, 831, 319, 783, 193, 510, 943, 455, 977, 899, 109, 741, 37, 90, 47, 258, 219, 150, 750, 91, 473, 440, 768, 21, 864, 125, 404, 888, 120, 552, 551, 576, 704, 357, 896, 516, 156, 952, 577, 900, 168, 931, 731, 893, 628, 524, 66, 884, 292525, 547, 735, 899, 975, 498, 406, 151, 564, 827, 363, 862, 607, 130, 573, 793, 332, 818, 762, 418, 988, 288, 480, 141, 319, 678, 278, 516, 105, 849, 319, 961, 908, 751, 118, 825, 132, 757, 631, 294, 156, 586, 704, 42, 837, 464, 807, 52, 454, 818, 58, 491, 654, 113, 218, 959, 488, 868, 799, 131, 154, 192, 390, 199, 424, 46, 782, 540, 108, 558, 403, 327, 312, 726, 184, 805, 194, 423, 383, 260, 242, 9, 723, 142, 608, 579, 879, 560, 378, 419, 452, 992, 626, 496, 739, 148, 265, 791, 966, 937, 623, 754, 166, 30, 338, 35, 48, 322, 868, 552, 820, 354, 70, 471, 350, 746, 469, 53, 705, 870, 22, 72, 227, 856, 311, 33, 282, 697, 400, 25, 472, 967, 207, 863, 753, 583, 569, 954, 608, 768, 579, 462, 473, 154, 581, 234, 83, 467, 386, 64, 731, 446, 91, 610, 856, 880, 770, 446, 3, 199, 413, 384, 476, 427, 574, 641, 455, 46, 221, 565, 985, 457, 971, 805, 248, 899, 195, 50, 885, 872, 27, 112, 545, 696, 537, 388, 698, 612, 647, 923, 399, 177, 920, 621, 627, 768, 442, 684, 288, 414, 537, 573, 231, 476, 356, 222, 923, 759, 633, 858, 247, 452, 273, 632, 133, 449, 504, 859, 826, 799, 728, 252, 665, 801, 453, 423, 247, 401, 607, 918, 967, 460, 328, 318, 141, 34, 572, 899, 392, 712, 584, 919, 294, 924, 229, 73, 675, 1, 193, 257, 908, 388, 448, 45, 726, 510, 652, 608, 552, 258, 723, 145, 608, 603, 644, 925, 1, 367, 62, 712, 740, 234, 37, 370, 875, 500, 969, 107, 657, 358, 201, 595, 937, 155, 972, 584, 462, 61, 798, 917, 500, 993, 346, 60, 29, 854, 504, 121, 949, 218, 301, 196, 819, 747, 66, 285, 215, 89, 233, 177, 123, 717, 100, 568, 376, 842, 563, 996, 878, 5, 886, 198, 717, 659, 532, 695, 150, 439, 789, 433, 871, 80, 680, 139, 557, 8, 561, 148, 678, 90, 480, 321, 93, 130, 666, 25, 6102, 428, 945, 947, 682, 128, 499, 172, 423, 511, 72, 370, 548, 599, 66, 879, 678, 559, 784, 4, 22, 745, 660, 812, 599, 218, 683, 638, 411, 227, 405, 387, 323, 568, 785, 637, 626, 211, 193, 142, 517, 525, 812, 159, 725, 214, 165, 505, 173, 489, 249, 789, 394, 944, 934, 451, 697, 660, 100, 259, 486, 626, 872, 183, 102, 24, 152, 27, 63, 676, 928, 17, 699, 859, 227, 500, 988, 106, 723, 284, 792, 685, 829, 847, 912, 547, 306, 195, 584, 256, 413, 40, 656, 903, 53, 182, 751, 403, 225, 715, 218, 195, 726, 79, 222, 497, 519, 769, 64, 651, 413, 570, 682, 232, 144, 619, 688, 51, 739, 694, 402, 719, 393, 639, 661, 926, 462, 654, 274, 163, 165, 107, 631, 589, 758, 944, 647, 402, 201, 826, 193, 907, 966, 961, 155, 829, 645, 865, 543, 68931, 643, 693, 484, 894, 823, 423, 764, 644, 70, 419, 465, 383, 755, 701, 517, 610, 323, 883, 808, 183, 562, 712, 401, 918, 848, 602, 648, 740, 115, 542, 947, 362, 712, 115, 565, 803, 821, 499, 356, 674, 436, 396, 831, 933, 444, 766078, 380, 782, 78, 809, 781, 514, 811, 976, 530, 213, 705, 951, 648, 882, 229, 573, 645, 313, 495, 676, 473, 375, 861, 66, 312, 213, 877, 366, 524, 763, 260, 441, 768, 694, 854, 328, 127, 531, 993, 293, 172, 312, 554, 414, 688, 326, 62, 319, 3, 18, 920, 633, 422, 153, 626, 563, 6, 483, 880, 414, 999, 278, 245, 727, 613, 462, 948, 396, 204, 452, 24, 265, 162, 241, 335, 960, 413, 947, 235, 509, 26, 90, 339, 805, 471, 630, 592, 802, 897, 100, 605, 664, 755, 196, 956, 408, 262, 918, 380, 803, 332, 386, 786, 51, 562, 743, 42, 802, 467, 133, 908, 492, 610, 861, 308, 846, 838, 980, 577, 560, 473489, 734, 827, 166, 738, 998, 329, 364, 783, 557, 686, 81, 41, 933, 652, 378, 648, 268, 294, 378, 331, 257, 822, 807, 460, 153, 207, 785, 868, 704, 295, 296, 841, 104, 391, 382, 452, 322, 430, 235, 239, 2, 297, 282, 825, 386, 236, 918, 323, 920, 51, 993, 330, 829, 28, 560, 683, 784, 916, 113, 634, 143, 864, 758, 598, 77, 965, 511, 767, 121, 202, 908, 887, 436, 483, 992, 82, 431, 775, 352, 551, 616, 738, 195, 821, 859, 17, 931, 616, 509, 557, 978, 261, 663, 783, 188, 567, 872, 983, 434, 924, 957, 474, 327, 642, 422, 416, 71, 651, 807, 982, 679, 433, 57, 408, 233, 423, 969, 963, 595, 484, 999, 787, 656, 609, 173, 568, 432, 874, 314, 624, 691, 991, 385, 397, 730, 127, 809, 152, 291, 93, 753, 620, 341, 503, 349, 265, 698, 600, 832, 577, 320, 830, 778, 900, 692, 525, 517, 230, 790, 958, 293, 534, 923, 147, 57, 529, 81, 471, 837, 934, 957, 34, 189, 117, 592, 400, 907, 482, 76, 810, 804, 411, 255, 132, 974, 833, 334, 484, 393, 101, 657, 744, 829, 345, 844, 313, 640, 725, 944, 111, 526, 737, 777, 574, 276, 765, 954, 210, 630, 678, 95, 54, 510, 329, 849, 532, 910, 404, 516, 825, 591, 204, 578, 384, 395, 966, 923, 618, 674, 308, 896, 920, 853, 492, 268, 934, 847, 615, 787, 193, 800, 67, 127, 180, 582, 403, 934, 762, 591, 699, 657, 772, 823, 127, 81, 666, 117, 328, 460, 902, 549, 489, 704, 774, 704, 185, 111, 517, 640, 872, 643, 868, 896, 483, 735, 561, 619, 174, 408, 645, 962, 863, 304, 68, 995, 336, 856, 210, 439, 373, 935, 340, 861, 755, 182, 543, 743, 342, 364, 975, 964, 82, 81, 880, 865, 381, 488, 653, 522, 539, 542, 160, 562, 933, 759, 96, 43, 989, 337, 627, 409, 594, 446, 187, 158, 956, 658, 628, 390, 308, 472, 178, 640, 283, 226, 364, 187, 16, 516, 590, 434, 260, 541, 733, 621, 294, 69, 664, 609, 565, 842, 348, 368, 961, 532, 544, 957, 974, 158, 455, 90, 328, 759, 735, 949, 881, 290, 523, 4, 804, 103, 668, 26317, 971, 772, 450, 362, 801, 317, 358, 946, 191, 674, 212, 72, 235] | 4695
    }

    def "subarray-sums-divisible-by-k"(int[] A, int K, int res) {
        given:
        def solution = new SubarraySumsDivisibleByK()

        expect:
        solution.subarraysDivByK(A, K) == res

        where:
        A                    | K | res
        [1, 2, 3, 4, 5]      | 5 | 4
        [4, 5, 0, -2, -3, 1] | 5 | 7
    }
}
